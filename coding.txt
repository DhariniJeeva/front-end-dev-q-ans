# Coding Questions:

*Question: What is the value of `foo`?*
```javascript
var foo = 10 + '20';
```

ans : 1020

*Question: What will be the output of the code below?*
```javascript
console.log(0.1 + 0.2 == 0.3);
```

ans : 
0.30000000000000004
false


*Question: How would you make this work?*
```javascript
add(2, 5); // 7
add(2)(5); // 7
```
ans: 
function add(a, b){
	return a && b ? a + b : function(c){
  	return a + c;
  }
}

console.log(add(2,5));
console.log(add(2)(5));




*Question: What value is returned from the following statement?*
```javascript
"i'm a lasagna hog".split("").reverse().join("");
```
ans  : goh angasal a m'i


*Question: What is the value of `window.foo`?*
```javascript
( window.foo || ( window.foo = "bar" ) );
```
ans: 
// --> 'bar' (assuming that window doesn't actually have a 'foo' property assigned)


*Question: What is the outcome of the two alerts below?*
```javascript
var foo = "Hello";
(function() {
  var bar = " World";
  alert(foo + bar);
})();
alert(foo + bar);
```

ans:

// --> alert ( Hello World )
// --> alert ( Helloundefined ) // <-- actually doesn't execute bc bar is not defined



*Question: What is the value of `foo.length`?*
```javascript
var foo = [];
foo.push(1);
foo.push(2);
```

ans : 2


*Question: What is the value of `foo.x`?*
```javascript
var foo = {n: 1};
var bar = foo;
foo.x = foo = {n: 2};
```

ans : 
Answer: undefined. Rather, bar.x is {n: 2}.

foo.x = foo = {n: 2} is the same as foo.x = (foo = {n: 2}). It is because a left term is first referenced and then a right term is evaluated when an assignment is performed in JavaScript. When foo.x is referenced, it refers to an original object, {n: 1}. So, when the result of the right term, {n: 2}, is evaluated, it will assigned to the original object, which is at the moment referenced by bar.




*Question: What does the following code print?*
```javascript
console.log('one');
setTimeout(function() {
  console.log('two');
}, 0);
console.log('three');
```

ans : one, three, two

It's because console.log('two'); will be invoked in the next event loop.



*Question: What is the difference between these four promises?*
```javascript
doSomething().then(function () {
  return doSomethingElse();
});

doSomething().then(function () {
  doSomethingElse();
});

doSomething().then(doSomethingElse());

doSomething().then(doSomethingElse);
```
ans :


